/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace SocotraBranchManager {
  export type AllocationInputStruct = {
    memberAddr: string;
    voteAmount: BigNumberish;
    rewardAmount: BigNumberish;
  };

  export type AllocationInputStructOutput = [string, BigNumber, BigNumber] & {
    memberAddr: string;
    voteAmount: BigNumber;
    rewardAmount: BigNumber;
  };
}

export interface SocotraBranchManagerInterface extends utils.Interface {
  functions: {
    "addBatchAllocation((address,uint256,uint256)[])": FunctionFragment;
    "addMemberAllocation(address,uint256,uint256)": FunctionFragment;
    "batchIssuePayout(uint256[])": FunctionFragment;
    "branchInfo()": FunctionFragment;
    "calPayoutAmount(uint256,uint256,uint256)": FunctionFragment;
    "changeSnapshotDelegation(address)": FunctionFragment;
    "delegateSpace(bytes32)": FunctionFragment;
    "init(address,address,string,string,string,string)": FunctionFragment;
    "issuePayout(uint256)": FunctionFragment;
    "memberClaimToken(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerSnapshotVoteProxy()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestPayout(uint256,address,bytes)": FunctionFragment;
    "totalAllocation()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawPayout(uint256)": FunctionFragment;
    "withdrawUnClaim(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addBatchAllocation"
      | "addMemberAllocation"
      | "batchIssuePayout"
      | "branchInfo"
      | "calPayoutAmount"
      | "changeSnapshotDelegation"
      | "delegateSpace"
      | "init"
      | "issuePayout"
      | "memberClaimToken"
      | "owner"
      | "registerSnapshotVoteProxy"
      | "renounceOwnership"
      | "requestPayout"
      | "totalAllocation"
      | "transferOwnership"
      | "withdrawPayout"
      | "withdrawUnClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBatchAllocation",
    values: [SocotraBranchManager.AllocationInputStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addMemberAllocation",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchIssuePayout",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "branchInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calPayoutAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSnapshotDelegation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateSpace",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issuePayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "memberClaimToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerSnapshotVoteProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestPayout",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnClaim",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBatchAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMemberAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchIssuePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "branchInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calPayoutAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSnapshotDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberClaimToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerSnapshotVoteProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnClaim",
    data: BytesLike
  ): Result;

  events: {
    "ClaimToken(address,uint256)": EventFragment;
    "DelegateSpace(bytes32)": EventFragment;
    "IssuePayout(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProxyRegistered(address)": EventFragment;
    "RegisterMember(address,uint256,uint256)": EventFragment;
    "RequestPayout(uint256,uint256,address,address,bytes)": EventFragment;
    "UpdateSnapshot(address)": EventFragment;
    "WithdrawPayout(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateSpace"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuePayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestPayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSnapshot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawPayout"): EventFragment;
}

export interface ClaimTokenEventObject {
  memberAddr: string;
  tokenAmount: BigNumber;
}
export type ClaimTokenEvent = TypedEvent<
  [string, BigNumber],
  ClaimTokenEventObject
>;

export type ClaimTokenEventFilter = TypedEventFilter<ClaimTokenEvent>;

export interface DelegateSpaceEventObject {
  spaceId: string;
}
export type DelegateSpaceEvent = TypedEvent<[string], DelegateSpaceEventObject>;

export type DelegateSpaceEventFilter = TypedEventFilter<DelegateSpaceEvent>;

export interface IssuePayoutEventObject {
  id: BigNumber;
}
export type IssuePayoutEvent = TypedEvent<[BigNumber], IssuePayoutEventObject>;

export type IssuePayoutEventFilter = TypedEventFilter<IssuePayoutEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProxyRegisteredEventObject {
  proxy: string;
}
export type ProxyRegisteredEvent = TypedEvent<
  [string],
  ProxyRegisteredEventObject
>;

export type ProxyRegisteredEventFilter = TypedEventFilter<ProxyRegisteredEvent>;

export interface RegisterMemberEventObject {
  memberAddr: string;
  voteAmount: BigNumber;
  rewardAmount: BigNumber;
}
export type RegisterMemberEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RegisterMemberEventObject
>;

export type RegisterMemberEventFilter = TypedEventFilter<RegisterMemberEvent>;

export interface RequestPayoutEventObject {
  id: BigNumber;
  amount: BigNumber;
  issuer: string;
  receiver: string;
  proof: string;
}
export type RequestPayoutEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string],
  RequestPayoutEventObject
>;

export type RequestPayoutEventFilter = TypedEventFilter<RequestPayoutEvent>;

export interface UpdateSnapshotEventObject {
  newDelegation: string;
}
export type UpdateSnapshotEvent = TypedEvent<
  [string],
  UpdateSnapshotEventObject
>;

export type UpdateSnapshotEventFilter = TypedEventFilter<UpdateSnapshotEvent>;

export interface WithdrawPayoutEventObject {
  id: BigNumber;
}
export type WithdrawPayoutEvent = TypedEvent<
  [BigNumber],
  WithdrawPayoutEventObject
>;

export type WithdrawPayoutEventFilter = TypedEventFilter<WithdrawPayoutEvent>;

export interface SocotraBranchManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SocotraBranchManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBatchAllocation(
      inputArr: SocotraBranchManager.AllocationInputStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMemberAllocation(
      memberAddr: string,
      voteAmount: BigNumberish,
      rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchIssuePayout(
      payoutIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    branchInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        parentTokenAddress: string;
        voteTokenAddress: string;
        name: string;
        imageUrl: string;
      }
    >;

    calPayoutAmount(
      claimAmount: BigNumberish,
      totalMemberToken: BigNumberish,
      totalMemberReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeSnapshotDelegation(
      snapshotAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateSpace(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _parentToken: string,
      _issuer: string,
      _name: string,
      _imageUrl: string,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issuePayout(
      payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    memberClaimToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerSnapshotVoteProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestPayout(
      amount: BigNumberish,
      receiver: string,
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAllocation(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPayout(
      payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUnClaim(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBatchAllocation(
    inputArr: SocotraBranchManager.AllocationInputStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMemberAllocation(
    memberAddr: string,
    voteAmount: BigNumberish,
    rewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchIssuePayout(
    payoutIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  branchInfo(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      parentTokenAddress: string;
      voteTokenAddress: string;
      name: string;
      imageUrl: string;
    }
  >;

  calPayoutAmount(
    claimAmount: BigNumberish,
    totalMemberToken: BigNumberish,
    totalMemberReward: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeSnapshotDelegation(
    snapshotAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateSpace(
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _parentToken: string,
    _issuer: string,
    _name: string,
    _imageUrl: string,
    _tokenName: string,
    _tokenSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issuePayout(
    payoutId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  memberClaimToken(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerSnapshotVoteProxy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestPayout(
    amount: BigNumberish,
    receiver: string,
    proof: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAllocation(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPayout(
    payoutId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUnClaim(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBatchAllocation(
      inputArr: SocotraBranchManager.AllocationInputStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    addMemberAllocation(
      memberAddr: string,
      voteAmount: BigNumberish,
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchIssuePayout(
      payoutIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    branchInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        parentTokenAddress: string;
        voteTokenAddress: string;
        name: string;
        imageUrl: string;
      }
    >;

    calPayoutAmount(
      claimAmount: BigNumberish,
      totalMemberToken: BigNumberish,
      totalMemberReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeSnapshotDelegation(
      snapshotAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateSpace(id: BytesLike, overrides?: CallOverrides): Promise<void>;

    init(
      _parentToken: string,
      _issuer: string,
      _name: string,
      _imageUrl: string,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    issuePayout(
      payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    memberClaimToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerSnapshotVoteProxy(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestPayout(
      amount: BigNumberish,
      receiver: string,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPayout(
      payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUnClaim(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimToken(address,uint256)"(
      memberAddr?: null,
      tokenAmount?: null
    ): ClaimTokenEventFilter;
    ClaimToken(memberAddr?: null, tokenAmount?: null): ClaimTokenEventFilter;

    "DelegateSpace(bytes32)"(spaceId?: null): DelegateSpaceEventFilter;
    DelegateSpace(spaceId?: null): DelegateSpaceEventFilter;

    "IssuePayout(uint256)"(id?: null): IssuePayoutEventFilter;
    IssuePayout(id?: null): IssuePayoutEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProxyRegistered(address)"(proxy?: null): ProxyRegisteredEventFilter;
    ProxyRegistered(proxy?: null): ProxyRegisteredEventFilter;

    "RegisterMember(address,uint256,uint256)"(
      memberAddr?: null,
      voteAmount?: null,
      rewardAmount?: null
    ): RegisterMemberEventFilter;
    RegisterMember(
      memberAddr?: null,
      voteAmount?: null,
      rewardAmount?: null
    ): RegisterMemberEventFilter;

    "RequestPayout(uint256,uint256,address,address,bytes)"(
      id?: null,
      amount?: null,
      issuer?: null,
      receiver?: null,
      proof?: null
    ): RequestPayoutEventFilter;
    RequestPayout(
      id?: null,
      amount?: null,
      issuer?: null,
      receiver?: null,
      proof?: null
    ): RequestPayoutEventFilter;

    "UpdateSnapshot(address)"(newDelegation?: null): UpdateSnapshotEventFilter;
    UpdateSnapshot(newDelegation?: null): UpdateSnapshotEventFilter;

    "WithdrawPayout(uint256)"(id?: null): WithdrawPayoutEventFilter;
    WithdrawPayout(id?: null): WithdrawPayoutEventFilter;
  };

  estimateGas: {
    addBatchAllocation(
      inputArr: SocotraBranchManager.AllocationInputStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMemberAllocation(
      memberAddr: string,
      voteAmount: BigNumberish,
      rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchIssuePayout(
      payoutIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    branchInfo(overrides?: CallOverrides): Promise<BigNumber>;

    calPayoutAmount(
      claimAmount: BigNumberish,
      totalMemberToken: BigNumberish,
      totalMemberReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeSnapshotDelegation(
      snapshotAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateSpace(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _parentToken: string,
      _issuer: string,
      _name: string,
      _imageUrl: string,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issuePayout(
      payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    memberClaimToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerSnapshotVoteProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestPayout(
      amount: BigNumberish,
      receiver: string,
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPayout(
      payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUnClaim(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBatchAllocation(
      inputArr: SocotraBranchManager.AllocationInputStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMemberAllocation(
      memberAddr: string,
      voteAmount: BigNumberish,
      rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchIssuePayout(
      payoutIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    branchInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calPayoutAmount(
      claimAmount: BigNumberish,
      totalMemberToken: BigNumberish,
      totalMemberReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeSnapshotDelegation(
      snapshotAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateSpace(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _parentToken: string,
      _issuer: string,
      _name: string,
      _imageUrl: string,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issuePayout(
      payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    memberClaimToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerSnapshotVoteProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestPayout(
      amount: BigNumberish,
      receiver: string,
      proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPayout(
      payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUnClaim(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
